from __future__ import annotations

from typing import AnyStr

from sansredis.sansio.callbacks import generic
from sansredis.sansio.callbacks.resp2 import (
    acl,
    cluster,
    geo,
    meta,
    module,
    pubsub,
    scan,
    sentinel,
    stream,
    zset,
)
from sansredis.sansio.types import ResponseHandlerT

__all__ = ("get",)


def get(command: AnyStr) -> ResponseHandlerT | None:
    cmdstr = generic.str_if_bytes(command).upper()
    cmdpre = cmdstr.split(" ", maxsplit=1)[0]
    return RESPONSE_CALLBACKS.get(cmdstr) or RESPONSE_CALLBACKS.get(cmdpre)


# TODO: Migrate all lambdas to pre-defined functions.
RESPONSE_CALLBACKS = {
    "AUTH": bool,
    "EXPIRE": bool,
    "EXPIREAT": bool,
    "HEXISTS": bool,
    "HMSET": bool,
    "MOVE": bool,
    "MSETNX": bool,
    "PERSIST": bool,
    "PSETEX": bool,
    "RENAMENX": bool,
    "SISMEMBER": bool,
    "SMOVE": bool,
    "SETEX": bool,
    "SETNX": bool,
    "BITCOUNT": int,
    "BITPOS": int,
    "DECRBY": int,
    "DEL": int,
    "EXISTS": int,
    "GEOADD": int,
    "GETBIT": int,
    "HDEL": int,
    "HLEN": int,
    "HSTRLEN": int,
    "INCRBY": int,
    "LINSERT": int,
    "LLEN": int,
    "LPUSHX": int,
    "PFADD": int,
    "PFCOUNT": int,
    "RPUSHX": int,
    "SADD": int,
    "SCARD": int,
    "SDIFFSTORE": int,
    "SETBIT": int,
    "SETRANGE": int,
    "SINTERSTORE": int,
    "SREM": int,
    "STRLEN": int,
    "SUNIONSTORE": int,
    "UNLINK": int,
    "XACK": int,
    "XDEL": int,
    "XLEN": int,
    "XTRIM": int,
    "ZCARD": int,
    "ZLEXCOUNT": int,
    "ZREM": int,
    "ZREMRANGEBYLEX": int,
    "ZREMRANGEBYRANK": int,
    "ZREMRANGEBYSCORE": int,
    "LPUSH": int,
    "RPUSH": int,
    "INCRBYFLOAT": float,
    "HINCRBYFLOAT": float,
    "SORT": zset.sort_return_tuples,
    "ZSCORE": generic.float_or_none,
    "ZINCRBY": generic.float_or_none,
    "GEODIST": generic.float_or_none,
    "FLUSHALL": generic.bool_ok,
    "FLUSHDB": generic.bool_ok,
    "LSET": generic.bool_ok,
    "LTRIM": generic.bool_ok,
    "MSET": generic.bool_ok,
    "PFMERGE": generic.bool_ok,
    "READONLY": generic.bool_ok,
    "READWRITE": generic.bool_ok,
    "RENAME": generic.bool_ok,
    "SAVE": generic.bool_ok,
    "SELECT": generic.bool_ok,
    "SHUTDOWN": generic.bool_ok,
    "SLAVEOF": generic.bool_ok,
    "SWAPDB": generic.bool_ok,
    "WATCH": generic.bool_ok,
    "UNWATCH": generic.bool_ok,
    "BLPOP": lambda r: r and (*r,) or None,
    "BRPOP": lambda r: r and (*r,) or None,
    "SDIFF": lambda r: (
        r
        and {
            *r,
        }
        or set()
    ),
    "SINTER": lambda r: r
    and {
        *r,
    }
    or set(),
    "SMEMBERS": lambda r: r
    and {
        *r,
    }
    or set(),
    "SUNION": lambda r: r
    and {
        *r,
    }
    or set(),
    "ZPOPMAX": zset.zset_score_pairs,
    "ZPOPMIN": zset.zset_score_pairs,
    "ZRANGE": zset.zset_score_pairs,
    "ZRANGEBYSCORE": zset.zset_score_pairs,
    "ZREVRANGE": zset.zset_score_pairs,
    "ZREVRANGEBYSCORE": zset.zset_score_pairs,
    "BZPOPMIN": lambda r: r and (r[0], r[1], float(r[2])) or None,
    "BZPOPMAX": lambda r: r and (r[0], r[1], float(r[2])) or None,
    "ZRANK": generic.int_or_none,
    "ZREVRANK": generic.int_or_none,
    "XREVRANGE": stream.parse_stream_list,
    "XRANGE": stream.parse_stream_list,
    "XREAD": stream.parse_xread,
    "XREADGROUP": stream.parse_xread,
    "BGREWRITEAOF": lambda r: True,
    "BGSAVE": lambda r: True,
    "ACL CAT": lambda r: [generic.str_if_bytes(e) for e in r],
    "ACL DELUSER": int,
    "ACL GENPASS": generic.str_if_bytes,
    "ACL GETUSER": acl.parse_acl_getuser,
    "ACL LIST": lambda r: [generic.str_if_bytes(e) for e in r],
    "ACL LOAD": generic.bool_ok,
    "ACL LOG": acl.parse_acl_log,
    "ACL SAVE": generic.bool_ok,
    "ACL SETUSER": generic.bool_ok,
    "ACL USERS": lambda r: [generic.str_if_bytes(e) for e in r],
    "ACL WHOAMI": generic.str_if_bytes,
    "CLIENT GETNAME": generic.str_if_bytes,
    "CLIENT ID": int,
    "CLIENT KILL": acl.parse_client_kill,
    "CLIENT LIST": acl.parse_client_list,
    "CLIENT SETNAME": generic.bool_ok,
    "CLIENT UNBLOCK": lambda r: r and int(r) == 1 or False,
    "CLIENT PAUSE": generic.bool_ok,
    "CLUSTER ADDSLOTS": generic.bool_ok,
    "CLUSTER COUNT-FAILURE-REPORTS": lambda x: int(x),
    "CLUSTER COUNTKEYSINSLOT": lambda x: int(x),
    "CLUSTER DELSLOTS": generic.bool_ok,
    "CLUSTER FAILOVER": generic.bool_ok,
    "CLUSTER FORGET": generic.bool_ok,
    "CLUSTER INFO": cluster.parse_cluster_info,
    "CLUSTER KEYSLOT": lambda x: int(x),
    "CLUSTER MEET": generic.bool_ok,
    "CLUSTER NODES": cluster.parse_cluster_nodes,
    "CLUSTER REPLICATE": generic.bool_ok,
    "CLUSTER RESET": generic.bool_ok,
    "CLUSTER SAVECONFIG": generic.bool_ok,
    "CLUSTER SET-CONFIG-EPOCH": generic.bool_ok,
    "CLUSTER SETSLOT": generic.bool_ok,
    "CLUSTER SLAVES": cluster.parse_cluster_nodes,
    "CONFIG GET": meta.parse_config_get,
    "CONFIG RESETSTAT": generic.bool_ok,
    "CONFIG SET": generic.bool_ok,
    "DEBUG OBJECT": meta.parse_debug_object,
    "GEOHASH": lambda r: list(map(generic.str_if_bytes, r)),
    "GEOPOS": lambda r: list(
        map(lambda ll: (float(ll[0]), float(ll[1])) if ll is not None else None, r)
    ),
    "GEORADIUS": geo.parse_georadius_generic,
    "GEORADIUSBYMEMBER": geo.parse_georadius_generic,
    "HGETALL": lambda r: r and generic.pairs_to_dict(r) or {},
    "HSCAN": scan.parse_hscan,
    "INFO": meta.parse_info,
    "LASTSAVE": generic.timestamp_to_datetime,
    "MEMORY PURGE": generic.bool_ok,
    "MEMORY STATS": meta.parse_memory_stats,
    "MEMORY USAGE": generic.int_or_none,
    "MODULE LOAD": module.parse_module_result,
    "MODULE UNLOAD": module.parse_module_result,
    "MODULE LIST": lambda r: [generic.pairs_to_dict(m) for m in r],
    "OBJECT": meta.parse_object,
    "PING": lambda r: generic.str_if_bytes(r) == "PONG",
    "PUBSUB NUMSUB": pubsub.parse_pubsub_numsub,
    "RANDOMKEY": lambda r: r and r or None,
    "SCAN": scan.parse_scan,
    "SCRIPT EXISTS": lambda r: list(map(bool, r)),
    "SCRIPT FLUSH": generic.bool_ok,
    "SCRIPT KILL": generic.bool_ok,
    "SCRIPT LOAD": generic.str_if_bytes,
    "SENTINEL GET-MASTER-ADDR-BY-NAME": sentinel.parse_sentinel_get_master,
    "SENTINEL MASTER": sentinel.parse_sentinel_master,
    "SENTINEL MASTERS": sentinel.parse_sentinel_masters,
    "SENTINEL MONITOR": generic.bool_ok,
    "SENTINEL REMOVE": generic.bool_ok,
    "SENTINEL SENTINELS": sentinel.parse_sentinel_slaves_and_sentinels,
    "SENTINEL SET": generic.bool_ok,
    "SENTINEL SLAVES": sentinel.parse_sentinel_slaves_and_sentinels,
    "SET": lambda r: r and generic.str_if_bytes(r) == "OK",
    "SLOWLOG GET": meta.parse_slowlog_get,
    "SLOWLOG LEN": int,
    "SLOWLOG RESET": generic.bool_ok,
    "SSCAN": scan.parse_scan,
    "TIME": lambda x: (int(x[0]), int(x[1])),
    "XCLAIM": stream.parse_xclaim,
    "XGROUP CREATE": generic.bool_ok,
    "XGROUP DELCONSUMER": int,
    "XGROUP DESTROY": bool,
    "XGROUP SETID": generic.bool_ok,
    "XINFO CONSUMERS": generic.parse_list_of_dicts,
    "XINFO GROUPS": generic.parse_list_of_dicts,
    "XINFO STREAM": stream.parse_xinfo_stream,
    "XPENDING": stream.parse_xpending,
    "ZADD": zset.parse_zadd,
    "ZSCAN": scan.parse_zscan,
}
